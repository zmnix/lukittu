// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                            String                  @id @default(uuid())
    email                         String                  @unique
    emailVerified                 Boolean                 @default(false)
    fullName                      String
    passwordHash                  String?
    imageUrl                      String?
    createdAt                     DateTime                @default(now())
    updatedAt                     DateTime                @updatedAt
    provider                      Provider                @default(CREDENTIALS)
    discordAccount                DiscordAccount?
    sessions                      Session[]
    createdProducts               Product[]
    auditLogs                     AuditLog[]
    ownedTeams                    Team[]                  @relation("TeamOwner")
    teams                         Team[]                  @relation("TeamUsers")
    createdApiKeys                ApiKey[]
    createdLicenses               License[]
    createdCustomers              Customer[]
    createdStripeIntegrations     StripeIntegration[]
    createdDiscordIntegrations    DiscordIntegration[]
    createdBuiltByBitIntegrations BuiltByBitIntegration[]
    createdPolymartIntegrations   PolymartIntegration[]
    createdInvitations            Invitation[]
    blacklist                     Blacklist[]
    releases                      Release[]
}

model DiscordAccount {
    id             String   @id @default(uuid())
    userId         String   @unique
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    discordId      String   @unique
    username       String
    avatarUrl      String?
    selectedTeamId String?
    selectedTeam   Team?    @relation(fields: [selectedTeamId], references: [id], onDelete: SetNull)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Session {
    id        String   @id @default(uuid())
    sessionId String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    ipAddress String?
    userAgent String?
    country   String?
    expiresAt DateTime
    createdAt DateTime @default(now())
}

model Team {
    id                    String                 @id @default(uuid())
    name                  String
    ownerId               String
    imageUrl              String?
    owner                 User                   @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    users                 User[]                 @relation("TeamUsers")
    products              Product[]
    licenses              License[]
    customers             Customer[]
    requestLogs           RequestLog[]
    auditLogs             AuditLog[]
    invitations           Invitation[]
    apiKeys               ApiKey[]
    devices               Device[]
    releases              Release[]
    blacklist             Blacklist[]
    metadata              Metadata[]
    watermarkingSettings  WatermarkingSettings?
    limits                Limits?
    stripeIntegration     StripeIntegration?
    discordIntegration    DiscordIntegration?
    builtByBitIntegration BuiltByBitIntegration?
    polymartIntegration   PolymartIntegration?
    settings              Settings?
    keyPair               KeyPair?
    activeDiscordAccounts DiscordAccount[]
    deletedAt             DateTime?
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    subscription          Subscription?
}

model Subscription {
    id                   String    @id @default(uuid())
    teamId               String    @unique
    team                 Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
    plan                 String
    stripeSubscriptionId String    @unique
    stripeCustomerId     String    @unique
    status               String    @default("active")
    canceledAt           DateTime?
    billingPeriodEndsAt  DateTime?
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt

    @@index([teamId])
}

model StripeIntegration {
    id              String   @id @default(uuid())
    teamId          String   @unique
    team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    webhookSecret   String
    apiKey          String
    active          Boolean  @default(true)
    createdByUserId String?
    createdBy       User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model DiscordIntegration {
    id              String   @id @default(uuid())
    teamId          String   @unique
    team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    active          Boolean  @default(true)
    createdByUserId String?
    createdBy       User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model BuiltByBitIntegration {
    id              String   @id @default(uuid())
    teamId          String   @unique
    team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    apiSecret       String
    active          Boolean  @default(true)
    createdByUserId String?
    createdBy       User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model PolymartIntegration {
    id              String   @id @default(uuid())
    teamId          String   @unique
    team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    webhookSecret   String // Polymart webhook secret
    signingSecret   String // Placeholder signing secret
    active          Boolean  @default(true)
    createdByUserId String?
    createdBy       User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Blacklist {
    id              String        @id @default(uuid())
    type            BlacklistType
    value           String
    hits            Int           @default(0)
    metadata        Metadata[]
    updatedAt       DateTime      @updatedAt
    createdAt       DateTime      @default(now())
    teamId          String
    createdByUserId String?
    createdBy       User?         @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    team            Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([teamId, type, value])
}

model Limits {
    id                    String   @id @default(uuid())
    teamId                String   @unique
    team                  Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    maxLicenses           Int      @default(100)
    maxProducts           Int      @default(3)
    logRetention          Int      @default(30)
    maxCustomers          Int      @default(100)
    maxTeamMembers        Int      @default(3)
    maxBlacklist          Int      @default(100)
    maxStorage            Int      @default(0) // in MB
    maxApiKeys            Int      @default(10)
    maxReleasesPerProduct Int      @default(100)
    maxBranchesPerProduct Int      @default(10)
    maxInvitations        Int      @default(10)
    allowClassloader      Boolean  @default(false)
    allowCustomEmails     Boolean  @default(false)
    allowWatermarking     Boolean  @default(false)
    updatedAt             DateTime @updatedAt
    createdAt             DateTime @default(now())
}

model Settings {
    id              String          @id @default(uuid())
    teamId          String          @unique
    team            Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
    deviceTimeout   Int             @default(60)
    ipLimitPeriod   IpLimitPeriod   @default(DAY)
    strictCustomers Boolean         @default(false)
    strictProducts  Boolean         @default(false)
    strictReleases  Boolean         @default(false)
    emailMessage    String?
    emailImageUrl   String?
    returnedFields  ReturnedFields?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}

model ReturnedFields {
    id                     String   @id @default(uuid())
    settingsId             String   @unique
    settings               Settings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
    licenseIpLimit         Boolean  @default(false)
    licenseSeats           Boolean  @default(false)
    licenseExpirationType  Boolean  @default(false)
    licenseExpirationStart Boolean  @default(false)
    licenseExpirationDate  Boolean  @default(false)
    licenseExpirationDays  Boolean  @default(false)
    licenseMetadataKeys    String[]
    customerEmail          Boolean  @default(false)
    customerFullName       Boolean  @default(false)
    customerUsername       Boolean  @default(false)
    customerMetadataKeys   String[]
    productName            Boolean  @default(false)
    productUrl             Boolean  @default(false)
    productLatestRelease   Boolean  @default(false)
    productMetadataKeys    String[]
    updatedAt              DateTime @updatedAt
    createdAt              DateTime @default(now())
}

model WatermarkingSettings {
    id                          String  @id @default(uuid())
    teamId                      String  @unique
    team                        Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
    watermarkingEnabled         Boolean @default(false)
    staticConstantPoolSynthesis Boolean @default(false)
    staticConstantPoolDensity   Int     @default(0)
    dynamicBytecodeInjection    Boolean @default(false)
    dynamicBytecodeDensity      Int     @default(0)
    temporalAttributeEmbedding  Boolean @default(false)
    temporalAttributeDensity    Int     @default(0)
}

model KeyPair {
    id         String   @id @default(uuid())
    publicKey  String
    privateKey String
    teamId     String   @unique
    team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
}

model ApiKey {
    id              String    @id @default(uuid())
    key             String    @unique
    teamId          String
    team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
    createdByUserId String?
    createdBy       User?     @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    expiresAt       DateTime?
    lastSeenAt      DateTime?
    createdAt       DateTime  @default(now())

    @@index([teamId])
}

model Invitation {
    id              String   @id @default(uuid())
    email           String
    teamId          String
    team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    accepted        Boolean  @default(false)
    createdByUserId String?
    createdBy       User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt       DateTime @default(now())
}

model Product {
    id              String          @id @default(uuid())
    name            String
    url             String?
    metadata        Metadata[]
    teamId          String
    team            Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
    createdByUserId String?
    createdBy       User?           @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    licenses        License[]
    releases        Release[]
    branches        ReleaseBranch[]
    requestLogs     RequestLog[]
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    @@index([teamId])
}

model ReleaseBranch {
    id        String    @id @default(uuid())
    name      String
    productId String
    product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    releases  Release[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@unique([productId, name])
}

model Release {
    id              String         @id @default(uuid())
    version         String
    metadata        Metadata[]
    status          ReleaseStatus  @default(DRAFT)
    latest          Boolean        @default(false)
    branchId        String?
    branch          ReleaseBranch? @relation(fields: [branchId], references: [id], onDelete: SetNull)
    teamId          String
    team            Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
    createdByUserId String?
    createdBy       User?          @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    lastSeenAt      DateTime?
    product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId       String
    allowedLicenses License[]
    file            ReleaseFile?
    requestLogs     RequestLog[]

    @@unique([productId, version, branchId])
    @@index([teamId])
}

model ReleaseFile {
    id            String       @id @default(uuid())
    releaseId     String       @unique
    release       Release      @relation(fields: [releaseId], references: [id], onDelete: Cascade)
    key           String
    size          Int
    name          String
    checksum      String
    mainClassName String?
    createdAt     DateTime     @default(now())
    requestLogs   RequestLog[]
}

model Address {
    id         String   @id @default(uuid())
    city       String?
    country    String?
    line1      String?
    line2      String?
    postalCode String?
    state      String?
    customerId String   @unique
    customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Customer {
    id              String       @id @default(uuid())
    username        String?
    email           String?
    fullName        String?
    metadata        Metadata[]
    teamId          String
    team            Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
    licenses        License[]
    requestLogs     RequestLog[]
    createdByUserId String?
    createdBy       User?        @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    address         Address?
}

model Metadata {
    id          String     @id @default(uuid())
    key         String
    value       String
    locked      Boolean    @default(false)
    teamId      String
    team        Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    //
    customerId  String?
    customer    Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
    //
    licenseId   String?
    license     License?   @relation(fields: [licenseId], references: [id], onDelete: Cascade)
    //
    productId   String?
    product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
    //
    releaseId   String?
    release     Release?   @relation(fields: [releaseId], references: [id], onDelete: Cascade)
    //
    blacklistId String?
    blacklist   Blacklist? @relation(fields: [blacklistId], references: [id], onDelete: Cascade)

    @@index([teamId])
}

model License {
    id               String                 @id @default(uuid())
    licenseKey       String
    licenseKeyLookup String
    ipLimit          Int?
    metadata         Metadata[]
    expirationType   LicenseExpirationType  @default(NEVER)
    expirationStart  LicenseExpirationStart @default(CREATION)
    expirationDate   DateTime?
    expirationDays   Int?
    seats            Int?
    suspended        Boolean                @default(false)
    teamId           String
    team             Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    products         Product[]
    customers        Customer[]
    allowedReleases  Release[]
    createdByUserId  String?
    createdBy        User?                  @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @updatedAt
    requestLogs      RequestLog[]
    devices          Device[]
    lastActiveAt     DateTime               @default(now())

    @@unique([teamId, licenseKeyLookup])
}

model Device {
    id               String   @id @default(uuid())
    licenseId        String
    license          License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
    teamId           String
    team             Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    ipAddress        String?
    country          String?
    deviceIdentifier String
    lastBeatAt       DateTime @default(now())
    createdAt        DateTime @default(now())

    @@unique([licenseId, deviceIdentifier])
    @@index([teamId])
}

model AuditLog {
    id           String             @id @default(uuid())
    ipAddress    String?
    longitude    Float?
    latitude     Float?
    userAgent    String?
    country      String?
    requestBody  Json?
    responseBody Json?
    version      String
    userId       String?
    user         User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
    targetId     String
    targetType   AuditLogTargetType
    teamId       String
    team         Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
    action       AuditLogAction
    source       AuditLogSource
    createdAt    DateTime           @default(now())

    @@index([teamId, createdAt])
}

model RequestLog {
    id               String        @id @default(uuid())
    responseTime     Int
    ipAddress        String?
    longitude        Float?
    latitude         Float?
    country          String?
    status           RequestStatus
    type             RequestType   @default(UNKNOWN)
    statusCode       Int
    version          String
    userAgent        String?
    deviceIdentifier String?
    path             String
    method           RequestMethod
    requestBody      Json?
    responseBody     Json?
    requestQuery     Json?
    teamId           String
    team             Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
    licenseId        String?
    license          License?      @relation(fields: [licenseId], references: [id], onDelete: Cascade)
    productId        String?
    product          Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
    releaseId        String?
    release          Release?      @relation(fields: [releaseId], references: [id], onDelete: SetNull)
    releaseFileId    String?
    releaseFile      ReleaseFile?  @relation(fields: [releaseFileId], references: [id], onDelete: SetNull)
    customerId       String?
    customer         Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
    createdAt        DateTime      @default(now())

    @@index([teamId, createdAt])
}

enum RequestType {
    UNKNOWN
    HEARTBEAT
    VERIFY
    DOWNLOAD
}

enum RequestMethod {
    GET
    POST
    PUT
    PATCH
    DELETE
}

enum AuditLogSource {
    DASHBOARD /// Logged-in user via the dashboard
    API_KEY /// Through developer API using API key
    STRIPE_INTEGRATION
    DISCORD_INTEGRATION
    BUILT_BY_BIT_INTEGRATION
    POLYMART_INTEGRATION
}

enum AuditLogAction {
    LEAVE_TEAM
    CREATE_TEAM
    UPDATE_TEAM
    DELETE_TEAM
    TRANSFER_TEAM_OWNERSHIP
    CREATE_LICENSE
    UPDATE_LICENSE
    DELETE_LICENSE
    CREATE_CUSTOMER
    UPDATE_CUSTOMER
    DELETE_CUSTOMER
    CREATE_PRODUCT
    UPDATE_PRODUCT
    DELETE_PRODUCT
    INVITE_MEMBER
    KICK_MEMBER
    CANCEL_INVITATION
    ACCEPT_INVITATION
    RESET_PUBLIC_KEY
    UPDATE_TEAM_SETTINGS
    UPDATE_TEAM_PICTURE
    DELETE_TEAM_PICTURE
    CREATE_BLACKLIST
    DELETE_BLACKLIST
    UPDATE_BLACKLIST
    CREATE_API_KEY
    DELETE_API_KEY
    SET_STRIPE_INTEGRATION
    DELETE_STRIPE_INTEGRATION
    SET_DISCORD_INTEGRATION
    DELETE_DISCORD_INTEGRATION
    CREATE_RELEASE
    UPDATE_RELEASE
    DELETE_RELEASE
    SET_LATEST_RELEASE
    UPDATE_EMAIL_PICTURE
    DELETE_EMAIL_PICTURE
    SET_BUILT_BY_BIT_INTEGRATION
    DELETE_BUILT_BY_BIT_INTEGRATION
    SET_POLYMART_INTEGRATION
    DELETE_POLYMART_INTEGRATION
    CREATE_BRANCH
    UPDATE_BRANCH
    DELETE_BRANCH
    SET_BUILT_BY_BIT_PLACEHOLDER
    SET_POLYMART_PLACEHOLDER
}

enum ReleaseStatus {
    PUBLISHED
    DRAFT
    DEPRECATED
    ARCHIVED
}

enum AuditLogTargetType {
    LICENSE
    CUSTOMER
    PRODUCT
    TEAM
    BLACKLIST
    RELEASE
    BRANCH
}

enum BlacklistType {
    DEVICE_IDENTIFIER
    IP_ADDRESS
    COUNTRY
}

enum Provider {
    CREDENTIALS
    GOOGLE
    GITHUB
}

enum LicenseExpirationType {
    NEVER
    DATE
    DURATION
}

enum LicenseExpirationStart {
    ACTIVATION
    CREATION
}

enum IpLimitPeriod {
    DAY
    WEEK
    MONTH
}

enum RequestStatus {
    INTERNAL_SERVER_ERROR
    BAD_REQUEST
    LICENSE_NOT_FOUND
    VALID
    IP_LIMIT_REACHED
    PRODUCT_NOT_FOUND
    CUSTOMER_NOT_FOUND
    LICENSE_EXPIRED
    LICENSE_SUSPENDED
    MAXIMUM_CONCURRENT_SEATS
    TEAM_NOT_FOUND
    RATE_LIMIT
    DEVICE_IDENTIFIER_BLACKLISTED
    COUNTRY_BLACKLISTED
    IP_BLACKLISTED
    RELEASE_NOT_FOUND
    INVALID_SESSION_KEY
    NO_ACCESS_TO_RELEASE
    RELEASE_ARCHIVED
    RELEASE_DRAFT
    FORBIDDEN
}
